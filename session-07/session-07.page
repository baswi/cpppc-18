---
format: Markdown
title: Session 7 Summary
category: course notes, cpppc
...

[Code Examples for Session 07](/session-07/)


# Excursions: Demoscene

Rockstar system programming: showcasing the swaggiest of reasons to learn C++

[Demo Programming for Beginners](https://www.youtube.com/watch?v=0suToaCS7WU)

- [Arte Documentary on Farbrausch](https://www.youtube.com/watch?v=hqh1iXIlyJk)
- [Conspiracy - Universal Sequence](https://www.youtube.com/watch?v=1PmRoLFtPRo)
- [Conspiracy - Chaos Theory](https://www.youtube.com/watch?v=ZfuierUvx1A)
- [fr-041: debris (live)](https://www.youtube.com/watch?v=4BMH9K1UDK8)
- [fr-08: .the .product](https://www.youtube.com/watch?v=Y3n3c_8Nn2Y)
- [Still - Coronoid](https://www.youtube.com/watch?v=zMInb4MCrm0)
- [Team PokeMe - SHizZLE](https://www.youtube.com/watch?v=Sgj5npyC068) and the
  [Making of SHizZLE](https://www.youtube.com/watch?v=81278bx1Sz0)
- [Drool](https://www.youtube.com/watch?v=rnBFEQDwhnk)
- [EmPatch in Ziphead](https://www.youtube.com/watch?v=rJYVDuEOLLQ)
- [EmPatch](https://www.youtube.com/watch?v=NKjqfiVlfJ4)


# Polymorphism


## Static Polymorphism (CRTP)


## Dynamic Polymorphism (virtual)



# Perfect Forwarding

**References**

- [ISO C++ Document N4161: Forwarding References](https://isocpp.org/files/papers/N4164.pdf)
- [Thomas Becker: rvalue References](http://thbecker.net/articles/rvalue_references/section_01.html) \
  Highly recommended, excellent in-depth series on rvalues, move semantics and
  perfect forwarding

Talks:

- [*Don't help the compiler.*](https://www.youtube.com/watch?v=AKtHxKJRwp4) \
  A masterpiece, but requires a basic understanding of forwarding, reference
  categories and reference collapsing rules.

Good, comprehensive articles:

- [Scott Meyers: Universal References in C++11](https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers) \
- [Perfect Forwarding and Universal References](https://eli.thegreenplace.net/2014/perfect-forwarding-and-universal-references-in-c/)

> The term "universal reference" is somewhat colloquial and has been
> deprecated in favor of the now-standard naming *forwarding references*

**Secondary References**

- [Beware of Perfect Forwarding Constructors](https://mpark.github.io/programming/2014/06/07/beware-of-perfect-forwarding-constructors/)
- [Scott Meyers: Adventures in Perfect Forwarding](http://aristeia.com/TalkNotes/Facebook2012_PerfectForwarding.pdf)
- [Faster C++ Move Construction and Perfect Forwarding](https://www.gdcvault.com/play/1015458/Faster-C-Move-Construction-and)


We used *rvalue references* to implement move semantics (move-construction and
move-assignments) in classes. Any function can be overloaded for rvalue
references:

~~~c++
void foo(X&  x); // lvalue reference overload
void foo(X&& x); // rvalue reference overload

X x;
X foobar() { return X { }; }

foo(x);        // argument is lvalue: calls foo(X&)
foo(foobar()); // argument is rvalue: calls foo(X&&)
~~~

Essentially, rvalue references allow to select a function overload at compile
time depending on whether it is used as *lvalue* or *rvalue* in an expression.


## The Problem

With overloads for rvalue references, we would need at least two variants
of a function taking a single argument to achieve "ideal" avoidance of temporary
copies.

With two arguments, this is already getting awkward:

~~~c++
void bar(T &  a, T &  b);
void bar(T && a, T &  b);
void bar(T &  a, T && b);
void bar(T && a, T && b);
~~~ 

You see where this is going.


## The Solution


First, we have to recognize that the following *Reference Collapsing Rules*
exist since C++11:

~~~c++
A&  &  -> A&
A&  && -> A&
A&& &  -> A&
A&& && -> A&&
~~~

Secondly, there is a template argument deduction rule for function templates
that take an argument by *rvalue reference* to a template argument:

~~~c++
template<typename T>
void foo(T &&);
~~~

The following rules apply:

- When foo is called on an lvalue of type A: \
    $\Rightarrow$  T resolves to A& \
    $\Rightarrow$ reference collapsed: A&
- When foo is called on an rvalue of type A: \
    $\Rightarrow$ T resolves to A \
    $\Rightarrow$ A&&


### Forwarding Reference

In [lab session 5](/session-05/session-05), we learned declarations of `rvalue` references (actually: `xvalue`):

~~~c++
void wrapper(Foo && foo) {
   func(foo);
}
~~~

To tell whether you need `std::move` or not, just remember that it is equivalent to `static_cast<Foo &&>(foo)`. In this example, `foo` already is an `rvalue` reference so there is no need to `std::move`. It would not hurt but just have no effect.

Now I need you to relax and remember that high blood pressure leads to serious disease, so try not to get upset.

In the following example, parameters `rval_ref` and `fwd_ref` do not have the same type category:

~~~c++
void wrapper_rval(Foo && rval_ref);

template <class T>
void wrapper_fwdr(T && fwd_ref);
~~~

In `wrapper_univ`, the parameter is a *forwarding reference*

> Sometimes called *universal reference* in dated references). \
> Please note that the term *universal reference* has been coined by Scott
> Meyers and is not official terminology. \
> In fact, **the term *universal reference* is wrong and misleading**,
> see [ISO C++ N4164](https://isocpp.org/files/papers/N4164.pdf)

The correct definition:

**Forwarding Reference**
: > rvalue reference in a type deducing context




# Idiom: Function Template Wrappers

~~~c++
std::pair<int, int> one;
std::pair<int, int> two;

one = std::make_pair(10, 20);
two = std::make_pair(10.5, 'A'); // implicit conversion from pair<double,char>
~~~

~~~c++
#include <utility>

template<typename T, typename U>
std::pair<T, U> make_pair_wrapper(T && t, U && u) {
  return std::make_pair(std::forward<T>(t),
                        std::forward<U>(u));
}

int  a = 0;
auto p = make_pair_wrapper(a, 3);
~~~


# Type Deduction: auto and decltype

For examples of `auto` type deduction in declarations, see
[this listing](/session-07/03-decltype-auto/auto_examples.h).

Example from [Effective Modern C++](https://www.oreilly.com/library/view/effective-modern-c/9781491908419/ch01.html):

~~~c++
// C++11
template<typename Container, typename Index> // works, but
auto Access(Container& c, Index i)           // requires
  -> decltype(c[i])                          // refinement
{
  // ...
  return c[i];
}

// C++14
template<typename Container, typename Index> // C++14;
auto Access(Container& c, Index i)           // not quite
{                                            // correct
  // ...
  return c[i];  // return type deduced from c[i]
}
~~~

Using `decltype(auto)`: 

~~~c++
// Perfect forwarding C++11 version
template<typename Container, typename Index>
auto
authAndAccess(Container&& c, Index i)
  -> decltype(std::forward<Container>(c)[i])
{
  authenticateUser();
  return std::forward<Container>(c)[i];
}
~~~

~~~c++
// Perfect forwarding C++14 version
template<typename Container, typename Index>
decltype(auto)
authAndAccess(Container&& c, Index i)
{
  authenticateUser();
  return std::forward<Container>(c)[i];
}
~~~


## Guideline: "almost always auto" (aaa)

Using `auto` when you supposedly know the eventual type of a variable might
appear sloppy and lazy to you. But quite the opposite is the case:
using `auto` by convention is actually considered a good practice.

Let's discuss the following declarations:

~~~c++
Widget w_dc_1;
Widget w_dc_2 = Widget();

Widget w_il_1 = { 2 };
Widget w_il_2   { 2 };

auto   w_a_1  = Widget();
auto   w_a_2  = Widget(4);
~~~

