---
format: Markdown
title: Session 5 Summary
category: course notes, cpppc
...

[Code Examples for Session 05](/session-05/)


# Demystifying the Sparse Array Implementation

The full implementation of the sparse array container from assignment 04 only
has about 300 lines, but only a few code sections are actually relevant.
Let's implement it step by step.

We start by defining the container interface and do not care about its
implementation for now.

The template parameters are specified already, and obviously the container has
to define `iterator` and `const_iterator` types.

As mentioned in the assignment, you can copy the interface of `std::array` for
a starting point. As `sparse_array` is a drop-in replacement for `std::array`,
their method signatures must be identical anyways.

This section only discusses the non-trivial aspects of the implementation that
differ from `std::array`.

~~~c++
template <class T, std::size_t N>
class sparse_array
{
public:
  typedef detail::sparse_array_iterator<self_t>              iterator;
  typedef detail::sparse_array_iterator<const self_t>  const_iterator;

  typedef T       &       reference;
  typedef const T & const_reference;

  /*
   * Non-modifying access for expressions:
   *
   *   T value = sparse_array[i]
   */
  const_reference operator[](const size_t pos) const;

  /*
   * Modifying access for expressions:
   *
   *   sparse_array[i] = value;
   */
  reference operator[](const size_t pos);

  iterator       begin();
  const_iterator begin() const;

  iterator       end();
  const_iterator end() const;
};
~~~

The method interface is very concise. Arrays are static containers so the only
essential operations are:

- Iterating container elements: the usual `begin` and `end` methods
- Element access: `operator[]`

Both must be defined in `const` and non-`const` variants to specialize read-
and write access.

For `sparse_array`, these are the crucial part. The non-`const` variant of
`operator[]` must detect element write access:

~~~c++
// Value to return for unspecified elements:
double default_val = 3.1415
// No data in array yet, container size only has logical relevance:
sparse_array<double, 102400000> sarray(defaul_val);
// Return default value if element at offset is unspecified:
double val_a = sarray[1240]; // -> 3.1415
// Add one element to array at specified logical offset:
sarray[463] = 1.234;
// Return the registered value:
double val_b = sarray[463];
~~~


# Move Semantics and Rule of 5


## References

- [FluentCpp: lvalues, rvalues and their references](https://www.fluentcpp.com/2018/02/06/understanding-lvalues-rvalues-and-their-references/)
- [Article on Move Assignment on cppreference](http://en.cppreference.com/w/cpp/language/move_assignment)
- [Article on rvalue References and Move Semantics](http://www.cprogramming.com/c++11/rvalue-references-and-move-semantics-in-c++11.html)

- Very gentle and friendly (and correct) recap of lvalues vs. rvalues:
      - <https://www.youtube.com/watch?v=cO1lb2MiDr8>
      - <https://www.youtube.com/watch?v=UTUdhjzws5g>

- Test and train your code literacy and "perfect formal pitch":
      - <https://github.com/electronicarts/EASTL>
      - <https://github.com/ericniebler/range-v3/blob/master/include/range/v3/view_facade.hpp>



# Value Categories

In [session 2](http://cpppc.coreglit.ch/session-02/session-02#type-qualifiers-references-vs.pointers),
we discussed expressions which are not allowed on the left-hand side of an assignment.
A brief example to summarize our findings:

~~~c++
int & a = x; // ok
int & a = 5; // wrong
// because:
int x   = 5; // ok
5       = x; // wrong
~~~

Historically, the term **lvalue** was used for **expressions** that are allowed on
the left-hand side of assignments and **rvalues** on the right-hand size,
respectively.

Essentially, rvalue references allow to select a function overload at compile
time depending on whether it is used as *lvalue* or *rvalue* in an expression.

In practice, the following suffices (see
[this article by Scott Meyers](https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers)):

- If you can take the address of an expression, the expression is an lvalue.
- If the type of an expression is an lvalue reference (e.g., `T&` or
  `const T&`, etc.), that expression is an lvalue.
- Otherwise, the expression is an rvalue. \
  Conceptually (and typically also in fact), rvalues correspond to temporary
  objects, such as those returned from functions or created through implicit
  type conversions. Most literal values (e.g., `10` and `5.3`) are also rvalues.

With the advent of *move semantics* in the C++11 standard, the terminology had
to be refined.


## Terminology

**NOTE**: This subsection is provided for the sake of completeness. I do neither expect nor encourage you to deep-dive into value category formalities (yet).

Each C++ expression is characterized by two independent properties: a type and a value category. \
The three primary value categories are:

prvalue (pure rvalue)
: Either computes the value of the operand of an operator or an expression that
  initializes an object \
  Example: result of calling a function whose return type is not a reference

xvalue (expiring value)
: An object whose resources can be reused

lvalue (left-value)
: a function or object, historically named *lvalues* as they could appear on the
  left-hand side of an assignment expression

Naming and definitions of value categories have changed in the C++ standard's
history.

An **rvalue** (right-value) is a **prvalue** or **xvalue**. \
A **glvalue** (generalized lvalue) is an **lvalue** or **xvalue**.

Consequently, *xvalue* can refer to either *rvalue* or *lvalue*.

Note that **value categories refer to expressions**, not just to variables or
values, despite their naming. \
For example, `a ? b : c` is an *xvalue*.


## References

- [Reference initialization](http://en.cppreference.com/w/cpp/language/reference_initialization)
- [Complete formal specification of value categories](http://en.cppreference.com/w/cpp/language/value_category) (not your go-to reference)
- [Stroustrup's notes on value categories](http://www.stroustrup.com/terminology.pdf)

